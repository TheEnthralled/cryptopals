package main

import (
	//"bytes"
	"encoding/hex"
	//"io"
	"log"
	"math/big"
	"math/rand"
	"net"
)


func AliceRegular() {
	// Gen A.
	p := new(big.Int)
	p.SetString(P_HEX, 16)

	g := new(big.Int)
	g.SetString(G_HEX, 16)

	_a := make([]byte, EXPONENT_LEN)
	_, err := rand.Read(_a)
	if err != nil {
		log.Fatal(err)
	}
	a := new(big.Int)
	a.SetString(hex.EncodeToString(_a), 16)

	A := new(big.Int)
	A.Exp(g, a, p)
	
	// Send p, g, A
	conn, err := net.Dial("tcp", ":" + BOB_PORT)
	if err != nil {
		log.Fatal(err)
	}

	// Send p.
	_p, err := hex.DecodeString(P_HEX)
	if err != nil {
		log.Fatal(err)
	}		
	_, err = conn.Write(_p)
	if err != nil {
		log.Fatal(err)
	}
	// Send g.
	_g, err := hex.DecodeString(G_HEX)
	if err != nil {
		log.Fatal(err)
	}
	_, err = conn.Write(_g)
	// Send A.
	_, err = conn.Write([]byte(A.String()))
	
	
	/*l, err := net.Listen("tcp", ALICE_PORT)
	if err != nil {
		log.Fatal(err)
	}
	defer l.Close()

	conn, err := l.Accept()
	if err != nil {
		log.Fatal(err)
	}

	var _b bytes.Buffer
	io.Copy(&_b, conn)
	b := _b.Bytes()

	fmt.Println(b)*/
	
}
